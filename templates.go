// Code generated by "esc -o templates.go templates"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/default/interface.go.tmpl": {
		name:    "interface.go.tmpl",
		local:   "templates/default/interface.go.tmpl",
		size:    2238,
		modtime: 1558834548,
		compressed: `
H4sIAAAAAAAC/6SVTW/cNhCG7/oVA18iuRup5wI9pHYOBlzHddz0EBQFVxpJbCiOTI6iXSz2vxf80Jdj
owhy2yXfeeadGZIqCng3MEGDGo1grGB/BPukxrfd0T4pSFvm3v5SFI3kdtjnJXVFOwjd/DvoEXWxSDOo
sBaDYmDseiUY86Qo4PrDHdx9eIT31zePeZL0ovwiGoTTCfL78PtOdAjnc5LIrifDkCYAFyVpxgNfuN+V
YLEXFl2yiyRLHPb9AUs0IC1wi1BS15EGqRlNLUoEJsADlgMjCHga0BxhlNzSwGCQB6OlbkDoIxga84SP
Pc7EmXFKwC9eBStpyQeItvK4totsy0bqZgfCNBbyPJ8hp3MGqX1S+QPaQfEO0BgyWXL2Rfzhgr+visW9
oTG1WTQ/kzbu/eoP27/0/mm0s/tIfqDxR+ETOzbEtXsq5ddpIj9N1S1zerncoJ/coYnQK1JDpz+WQms0
YLA3aFGzBQElKYUlS9JAtfs3dNrNQjCUQsMewfqwymUiqA11IFZnZoveuikK0Id7g24XRN+jriwIpZY0
BBVahppMSCN1kyewRKV++/Lz3+uWJTOaLHt2N1h2VkuhFFYgasYF6LMQWOoQ8MBGQG+oRGvtki2C0izM
N7btUewVPtC47Ri71Td21YNZty1/05po2kt/RxbxGIdjPyE7tyF1TaYTbiTO3RyRZnA5/4m4T0LJakGZ
AUHWwK207kYJ+Or3Pd75hRTzJgdNDHd/3t5mju8RaQZ7IhWpwfgnoQbc2JRvuY2zc+QB87lKL06l60AG
q2FtiPfkd15jvrHQB8XCjSEvkrdD+ktye29kJ/wTMc/LVU11bIF7AKGPoi94fDa/NWI7ykkRy4mibzu0
YocO+dxuHP60hCPQTjFYRZG07uXrhfEu9zHWuoB1qnTbgFD/RyXLZ5d6umyeZt1+LDRqX7ilt6g3hSjU
DbfB/cyAIAw25lt4w9h9O1LpVjfhIMG2NKjK3VQ3Canh88+7iZntgLhFM0rr3vpeaFnCKJVyciOkxSo4
cPleP2n68M7Xvrw3OnhhWnu5qcOqtKCl2rktPd8X7Ho+hv3FceBNJkKSNDDWb9M5Sb4K47/g/zx7zMNn
5Pq3LNVSZa8Krkjr/5E8HqIgS/4LAAD//7nL3CG+CAAA
`,
	},

	"/templates/default/manifest.json": {
		name:    "manifest.json",
		local:   "templates/default/manifest.json",
		size:    271,
		modtime: 1558834548,
		compressed: `
H4sIAAAAAAAC/2yNQcqDMBCF9znFkPVPDuAZfrtoXRRKCVOZFouJg3kuRLx7UdsKJZuBee/7eJMhsqnm
WI0qJastttdjVPGB1T1TF+3fgqn0xyHagi6GiMg2EdLfuRb36ByCtitGZIOAf7MBTZvjPCThWxii62er
4lsr+xqW10+TW/PtHjjIPGftEwLO5f/uJwQs+rvIqGY2rwAAAP//zYpLFg8BAAA=
`,
	},

	"/templates/default/meta.go.tmpl": {
		name:    "meta.go.tmpl",
		local:   "templates/default/meta.go.tmpl",
		size:    10577,
		modtime: 1558834548,
		compressed: `
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
zB2pLTiPvX8FAAD//3PwqTxRKQAA
`,
	},

	"/templates/default/meta_test.go.tmpl": {
		name:    "meta_test.go.tmpl",
		local:   "templates/default/meta_test.go.tmpl",
		size:    9169,
		modtime: 1558834548,
		compressed: `
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
AA==
`,
	},

	"/templates/default/scan_type_map.json": {
		name:    "scan_type_map.json",
		local:   "templates/default/scan_type_map.json",
		size:    664,
		modtime: 1558834548,
		compressed: `
H4sIAAAAAAAC/4TRP8+CMBDH8Z1X0TATEv6kecL4DCbO6tQ4gKI5U9pEymR876a0dz0XZPvBJ98beGVC
5IO1Ou/E+qiwCpGbRevy349z4RUY95fUulDt/QhqYUzFhewEyYFxlSQXFstVkvUQKlw8SBKMa2pebGpe
bGpWRKhw8SJJME62vChbXpQtKyJUuHiR5E3bHo8rWkh3cTMbs4rWl6Wug2lM/8av8uhfoV5HoNfxAlOv
Y3Z2TzB3cocwgxzAYfOHfMzWpPNbMn7rNmX2zj4BAAD//+zO34KYAgAA
`,
	},

	"/templates/default/stmt_{{.StmtXMLName}}.go.tmpl": {
		name:    "stmt_{{.StmtXMLName}}.go.tmpl",
		local:   "templates/default/stmt_{{.StmtXMLName}}.go.tmpl",
		size:    9659,
		modtime: 1562836632,
		compressed: `
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
`,
	},

	"/templates/default/table_{{.Table.TableName}}.go.tmpl": {
		name:    "table_{{.Table.TableName}}.go.tmpl",
		local:   "templates/default/table_{{.Table.TableName}}.go.tmpl",
		size:    9634,
		modtime: 1560506510,
		compressed: `
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
`,
	},

	"/templates/default/util.go.tmpl": {
		name:    "util.go.tmpl",
		local:   "templates/default/util.go.tmpl",
		size:    953,
		modtime: 1558834548,
		compressed: `
H4sIAAAAAAAC/3RSTU/rSBC8z68ockBjATZ7hc1KrOCAtAK0IN4BcRjsdjIv88W4/ZIo+L8/jT8ScngX
yzNdXVXdNUWBm5Y9FuQoKqYKH1s0n2Z9YbfNp4FcMofmqigWmpftR156Wyxb5RY/W7cmVxygGSqqVWsY
TDYYxZSLosDt4wMeHl9wd3v/kgsRVLlSC8Juh/xp+H9QltB1QmgbfGRIAcxqyzORCVG3rsQi+jb8u5VN
LPFsdEnxHA0ZKtlHJITUjinWqqRdl+FFfRj6369/aF4+RW1V3J6DY7Pv7fmmY4adEICuEyR3m//IyQwn
c1zi6wtyxJ7M4bTB6enYfARMFAAQlNOlrC3ndzH6WMvZ3SZQySAbeIsm6TWzLBNAlzRD1LbB1RxWrUha
Fd6+zfGuHWcoCowjvCrTEi7+gXYVbeB7v8XgRgC1j9CJ6/IaGn+jieXk8Rr67GyYEtBMNsGG+j2TlTrr
Kxz7+3GvMgGHQv8pCjyvdED06wZrzUu41hj8Sq7ygbnGCcf8VRldyWklQOkda9dSf+wGEyEpccy/jyYH
MV1tzuFXCdCv5y2879n9as+a3i0crY+3U/vWVfkIGeK8CYFcJTlm47WucZzpRIlDtGOT02bq6qbuaoP5
0Uu5wF9jbfKLeYJ9n/ePmnvFIYhqk+VyfJYHG4ckerpOiE6I3wEAAP//WFCx1rkDAAA=
`,
	},

	"/templates/graphviz/db.dot.tmpl": {
		name:    "db.dot.tmpl",
		local:   "templates/graphviz/db.dot.tmpl",
		size:    1020,
		modtime: 1558834548,
		compressed: `
H4sIAAAAAAAC/3xSPW/bMBDd+SseCI+10wKdbJEomqBLiwxBOhRFBso8K0QZSqAYNAXB/15QlC05/th0
fB+H93TaNF51z9A1ImNAmX4zAPDK/dHGC/7jgTPgacMA12oa4f5ZdSR4Z5Vxgd7CyGFAjFnbEFZ3X1eP
qrbUIyU2qHiMKG/36oWQEh/tAKtqsqKqQkZRt16TF/wjx5as3Y+fyth3amtck2E5yoEqeFkFjW2bcSf4
Zy5jXM73LVOqboKW1U3wJ0KZKQUOWj7+66bhp+tN40gfHu5frc2uZ9zyyjH/bWtfX9yQHphvm435QaNr
fRBDOUUztvOFQ1nTOMEt7UKO844w7D9xO6dZ3amgatVTDnZNnQVmVzT73EjpV4wgpy/uvJCA7+32jV21
Om2y8NgBzhayUJ42KEc1Hdy377OyY8TC0+62tT3WAquH4fv4hxykC/MBi21rB+aZ/zaZZYZxmt4m94WZ
U3MJ2arc3fG1rw/gcUtrwlIWZTG9LB7xd3ey/ruZIs1KmyZ2NCT2PwAA//88MZDf/AMAAA==
`,
	},

	"/templates/graphviz/manifest.json": {
		name:    "manifest.json",
		local:   "templates/graphviz/manifest.json",
		size:    40,
		modtime: 1558834548,
		compressed: `
H4sIAAAAAAAC/6rmUlBQKkgtCirNU7JSiOZSUFBQUEpJ0kvJL9EryS3IUeJSUIjlquUCBAAA//+7ac17
KAAAAA==
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},

	"/templates/default": {
		name:  "default",
		local: `templates/default`,
		isDir: true,
	},

	"/templates/graphviz": {
		name:  "graphviz",
		local: `templates/graphviz`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/default"],
		_escData["/templates/graphviz"],
	},

	"templates/default": {
		_escData["/templates/default/interface.go.tmpl"],
		_escData["/templates/default/manifest.json"],
		_escData["/templates/default/meta.go.tmpl"],
		_escData["/templates/default/meta_test.go.tmpl"],
		_escData["/templates/default/scan_type_map.json"],
		_escData["/templates/default/stmt_{{.StmtXMLName}}.go.tmpl"],
		_escData["/templates/default/table_{{.Table.TableName}}.go.tmpl"],
		_escData["/templates/default/util.go.tmpl"],
	},

	"templates/graphviz": {
		_escData["/templates/graphviz/db.dot.tmpl"],
		_escData["/templates/graphviz/manifest.json"],
	},
}
